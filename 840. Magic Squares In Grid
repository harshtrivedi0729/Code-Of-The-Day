// class Solution {
// public:

//     bool isMegicgrid(vector<vector<int>>& grid,int r,int c){
//         // find unique number from 1 to 9
//         unordered_set<int> st;
//         for(int i=0;i<3;i++){
//             for(int j=0;j<3;j++){
//                 int num=grid[r+i][c+j];
//                 if(num<1 || num>9 || st.count(num)){
//                     return false;
//                 }else{
//                     st.insert(num);
//                 }
//             }
//         }

//         // check sums of rows and columns
//         int sum= grid[r][c]+grid[r][c+1]+grid[r][c+2];

//         for(int i=0;i<3;i++){
//             if(grid[r+i][c]+grid[r+i][c+1]+grid[r+i][c+2] != sum){
//                 return false;
//             }

//             if(grid[r][c+i]+grid[r+1][c+i]+grid[r+2][c+i] != sum){
//                 return false;
//             }
//         }

//         // diagonal check
//         if(grid[r][c]+ grid[r+1][c+1] + grid[r+2][c+2] != sum){
//             return false;
//         }

//         // anti diagonal check
//         if(grid[r][c+2]+grid[r+1][c+1]+grid[r+2][c] != sum){
//             return false;
//         }

//         return true;
//     }


//     int numMagicSquaresInside(vector<vector<int>>& grid) {
//         int row=grid.size();
//         int col=grid.size();

//         int count=0;
//         if(row < 3 || col < 3) return 0;
//         for(int i=0;i<=row-3;i++){
//             for(int j=0;j<=col-3;j++){
//                 if(isMegicgrid(grid,i,j)){
//                     count++;
//                 }
//             }
//         }
//         return true;
//     }
// };

class Solution {
public:
    bool isMagic(vector<vector<int>>& grid, int row, int col)
    {
        set<int>st;
        int sum = grid[row][col] + grid[row][col+1] + grid[row][col+2];
        for(int i=row;i<row+3;i++)
        {
            int rowSum = 0;
            for(int j=col;j<col+3;j++)
            {
                st.insert(grid[i][j]);
                rowSum += grid[i][j];
            }
            if(sum != rowSum) return false;
        }
        for(int j=col;j<col+3;j++)
        {
            int colSum = 0;
            for(int i=row;i<row+3;i++)
                colSum += grid[i][j];
            if(sum != colSum) return false;
        }
        if (grid[row][col] + grid[row+1][col+1] + grid[row+2][col+2] != sum) return false;
        if (grid[row][col+2] + grid[row+1][col+1] + grid[row+2][col] != sum) return false;
        for(int i=1;i<10;i++)
            if(not st.count(i)) return false;
        return true;
    }
    int numMagicSquaresInside(vector<vector<int>>& grid) 
    {
        int ans = 0, n = grid.size(), m = grid[0].size();
        for(int i=0;i<n-2;i++)
            for(int j=0;j<m-2;j++)
                ans += isMagic(grid, i, j);
        return ans;
    }
};
